name: "[Blocking] Build"
on:
  push:
    branches:
      - main
      - release-*
    tags:
      - v*
    paths-ignore:
      - "**.md"
      - "website/**"
      - "docs/**"
      - "demo/**"
  pull_request:
    branches:
      - main
      - release-*
    paths-ignore:
      - "**.md"
      - "website/**"
      - "docs/**"
      - "demo/**"
  workflow_dispatch:

env:
  TRIVY_VERSION: 0.59.1
  BUILDKIT_VERSION: 0.21.1
  TRIVY_DISABLE_VEX_NOTICE: "true"

permissions:
  contents: read

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions: read-all
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.3.1
        with:
          egress-policy: audit
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.24"
          check-latest: true
      - name: Add containerd-snapshotter to docker daemon
        run: |
          echo '{"features": { "containerd-snapshotter": true }}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Unit test
        shell: bash
        env:
          CODECOV_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
        run: make test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.3.1
        with:
          egress-policy: audit
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.24.2"
          check-latest: true
      - name: Build copa
        shell: bash
        run: |
          make build
          make archive
      - name: Upload copa to build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: copa_edge_linux_amd64.tar.gz
          path: dist/linux_amd64/release/copa_edge_linux_amd64.tar.gz
      - name: Load test cases for patch testing
        id: load-test-envs-matrix
        shell: bash
        run: echo "buildkitenvs=$(.github/workflows/scripts/buildkit-env-matrix.sh)" | tee -a "${GITHUB_OUTPUT}"
    outputs:
      buildkitenvs: ${{ steps.load-test-envs-matrix.outputs.buildkitenvs }}

          
  test-patch-multiarch:
    needs: build
    name: Test patch with multiarch
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions: read-all
    steps:
      # - name: Harden the runner (Audit all outbound calls)
      #   uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
      #   with:
      #     egress-policy: audit
      - name: Change docker daemon config
        run: |
          echo '{"features": { "containerd-snapshotter": true }, "insecure-registries": ["localhost:5000"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Set up buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2
        with:
          install: true
          platforms: linux/amd64,linux/arm/v5,linux/arm64,linux/386,linux/mips64le
      - name: Install oras CLI
        uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20 # v1.2.3
      - name: Set up local registry
        run: |
          docker run -d -p 5000:5000 --restart=always --name registry registry:2
          # wait for the registry to be healthy
          for i in $(seq 1 60); do
            if curl -f http://localhost:5000/v2/_catalog; then
              break
            fi
            sleep 1
          done
      - name: Test registry
        run: |
          set -eu -o pipefail
          docker pull nginx:latest
          docker tag nginx:latest localhost:5000/nginx:latest
          docker push localhost:5000/nginx:latest
      - name: Download copa from build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: copa_edge_linux_amd64.tar.gz
      - run: docker system prune -a -f --volumes
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: "1.24.2"
          check-latest: true
      - name: Install required tools
        shell: bash
        run: .github/workflows/scripts/download-tooling.sh
      - name: Install multiarch tooling
        shell: bash
        run: .github/workflows/scripts/download-multiarch-tooling.sh
      - name: Download copa from build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: copa_edge_linux_amd64.tar.gz
      - name: Extract copa
        shell: bash
        run: |
          tar xzf copa_edge_linux_amd64.tar.gz
          ./copa --version
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      # - name: ping deb.debian.org
      #   run: |
      #     set -eu -o pipefail
      #     ping -c 1 deb.debian.org
      - name: Run functional test
        shell: bash
        run: |
          set -eu -o pipefail
          go test -v ./integration/multiarch --addr=docker:// --copa="$(pwd)/copa" -timeout 0
